<?php

namespace Survos\Providence\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use Survos\BaseBundle\Entity\SurvosBaseEntity;

/**
 * @ORM\Entity(repositoryClass="Survos\Providence\Repository\TeamRepository")
 */
class Team extends SurvosBaseEntity
{
    /**
     * @ORM\Id()
     * @ORM\GeneratedValue()
     * @ORM\Column(type="integer")
     */
    private $id;

    /**
     * @ORM\Column(type="string", length=64)
     */
    private $name;

    /**
     * @ORM\Column(type="string", length=64)
     */
    private $slug;

    /**
     * @ORM\OneToMany(targetEntity="Survos\Providence\Entity\Member", mappedBy="team", orphanRemoval=true, cascade={"persist"})
     */
    private $members;

    /**
     * @ORM\OneToMany(targetEntity="Survos\Providence\Entity\project", mappedBy="team", orphanRemoval=true, cascade={"persist"})
     */
    private $projects;


    /**
     * @ORM\Column(type="string", length=5)
     */
    private $type;

    public function __construct()
    {
        $this->members = new ArrayCollection();
        $this->productions = new ArrayCollection();
        $this->scripts = new ArrayCollection();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;

        return $this;
    }

    public function getSlug(): ?string
    {
        return $this->slug;
    }

    public function setSlug(string $slug): self
    {
        $this->slug = $slug;

        return $this;
    }

    /**
     * @return Collection|Member[]
     */
    public function getMembers(): Collection
    {
        return $this->members;
    }

    public function addMember(Member $member): self
    {
        if (!$this->members->contains($member)) {
            $this->members[] = $member;
            $member->setproject($this);
        }

        return $this;
    }

    public function removeMember(Member $member): self
    {
        if ($this->members->contains($member)) {
            $this->members->removeElement($member);
            // set the owning side to null (unless already changed)
            if ($member->getproject() === $this) {
                $member->setproject(null);
            }
        }

        return $this;
    }

    /**
     * @return Collection|Production[]
     */
    public function getProductions(): Collection
    {
        return $this->productions;
    }

    public function addProduction(Production $production): self
    {
        if (!$this->productions->contains($production)) {
            $this->productions[] = $production;
            $production->setTeam($this);
        }

        return $this;
    }

    public function removeProduction(Production $production): self
    {
        if ($this->productions->contains($production)) {
            $this->productions->removeElement($production);
            // set the owning side to null (unless already changed)
            if ($production->getTeam() === $this) {
                $production->setTeam(null);
            }
        }

        return $this;
    }

    /**
     * @return Collection|Script[]
     */
    public function getScripts(): Collection
    {
        return $this->scripts;
    }

    public function addScript(Script $script): self
    {
        if (!$this->scripts->contains($script)) {
            $this->scripts[] = $script;
        }

        return $this;
    }

    public function removeScript(Script $script): self
    {
        if ($this->scripts->contains($script)) {
            $this->scripts->removeElement($script);
        }

        return $this;
    }

    function getUniqueIdentifiers(): array
    {
        return ['teamSlug' => $this->getSlug()];
    }

    public function getType(): ?string
    {
        return $this->type;
    }

    public function setType(string $type): self
    {
        $this->type = $type;

        return $this;
    }
}
